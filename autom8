#!/usr/bin/env bash
#
# Copyright (C) 2016 Salim Badakhchani.
# Author: Salim Badakhchani <sbadakhc@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
########################################################################


## Global delcarations

# Switch on Debugging
#set -x

# Define logfile
LOG="/root/install.log"

## Execution statements logically grouped into functions.

# Run pre-execution tests
exec_check() {
    if [[ $(hostname) == ${1} ]]; then
        echo -e "\n# Please make sure the hostname matched the fqdn inputted "
        exit
    else
        [[ $(id -u) == 0 ]] || echo -e "\n# This script requires root privileges to run"
        [[ $(docker --version) != null ]] || echo -e "\n# Please make sure docker is installed and running"
    fi
}

config_network() {
    echo -e "# Configuring network...Please be patient!!!" >> ${LOG}
    yum -y remove NetworkManager*
    systemctl stop NetworkManager
    systemctl disable NetworkManager
}

disable_firewall() {
    echo -e "# Disabling firewall..." >> ${LOG}
    systemctl stop iptables > /dev/null 2>&1 
    systemctl stop ip6tables > /dev/null 2>&1
    systemctl stop firewalld > /dev/null 2>&1
}

update_system() {
    echo -e "# Updating system..." >> ${LOG}
    yum -y update > /dev/null 2>&1
}

install_packages() {
    echo -e "# Installing packages..." >> ${LOG}
    yum -y install epel-release
    yum -y install git wget unzip net-tools httpd-tools patch mlocate maven htop iftop curl tree bind-utils dos2unix bash-completion git yum-utils gcc-c++ make
    curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash -
    yum -y install nodejs
    yum -y remove dnsmasq
}

create_profile() {
    echo "# Creating profile..." >> ${LOG}
    cat > /etc/profile.d/custom.sh << 'EOF'
# Prompt colors
if [ `whoami` != "root" ]; then
    PS1='\[\e[32m\][\u@\h \W]\$\[\e[0m\] '
else
    PS1='\[\e[31m\][\u@\h \W]\$\[\e[0m\] '
fi

# Aliases
alias c='clear'
alias h='history'
alias m='less /var/log/messages'
alias l='ll -has '
alias n='netstat -vatulpn | grep'
alias p='ps -A | grep'
alias g='gvim'

# Configure bash history 
export HISTSIZE='1000000'
export HISTIGNORE=' *:&:?:??'
export HISTCONTROL='ignoreboth:erasedups'

# Configure environment
export DOMAIN="example.com"
export FQDN="master.${DOMAIN}"
export SUBDOMAIN="${DOMAIN}"
export INT_IPADDR="192.168.122.100"

# Configure tooling
export OPENSHIFT=/var/lib/openshift
export OPENSHIFT_VERSION=v3.6.0
export OPENSHIFT_REVISION=c4dd4cf
export OPENSHIFT_SERVER=openshift-origin-server-${OPENSHIFT_VERSION}-${OPENSHIFT_REVISION}
export OPENSHIFT_CLIENT=openshift-origin-client-tools-${OPENSHIFT_VERSION}-${OPENSHIFT_REVISION}
export PATH=${OPENSHIFT}:/opt/${OPENSHIFT_SERVER}:/opt/${OPENSHIFT_CLIENT}:${PATH}
export KUBECONFIG=${OPENSHIFT}/openshift.local.config/master/admin.kubeconfig
export CA_BUNDLE=/var/lib/openshift/openshift.local.config/master/example.com.crt
export KUBERNETES_DOMAIN=${DOMAIN}

# Turn on bash history options
shopt -s histappend histreedit histverify

# Sync term history
history() {
  history_sync
  builtin history "$@"
}

history_sync() {
  builtin history -a         
  HISTFILESIZE=$HISTSIZE     
  builtin history -c         
  builtin history -r         
}

PROMPT_COMMAND=history_sync
EOF
}

setup_env() {
    echo -e "# Setting up environment..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
}

add_hostname() {
    echo -e "# Setting up hostname..." >> ${LOG}
    hostnamectl set-hostname ${FQDN}
}

pull_images() {
    echo -e "# Pull docker images..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    docker pull openshift/origin-pod
    docker pull openshift/origin-sti-builder
    docker pull openshift/origin-docker-builder
    docker pull openshift/origin-deployer
    docker pull openshift/origin-docker-registry
    docker pull openshift/origin-haproxy-router
    docker pull prom/haproxy-exporter
}

install_dns(){
    echo -e "# Configuring dns..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    cp -p /etc/resolv.conf /etc/resolv.conf.orig
    cat > /etc/resolv.conf << 'EOF'
; generated by /usr/sbin/dhclient-script
domain example.com
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
}

install_openshift_client() {
    echo -e "# Installing openshift client..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    mkdir /opt/${OPENSHIFT_CLIENT}
    [[ -f "/tmp/${OPENSHIFT_CLIENT}-linux-64bit.tar.gz" ]] || \
    wget https://github.com/openshift/origin/releases/download/${OPENSHIFT_VERSION}/${OPENSHIFT_CLIENT}-linux-64bit.tar.gz -P /tmp
    tar -zxvf /tmp/${OPENSHIFT_CLIENT}-linux-64bit.tar.gz -C /opt/${OPENSHIFT_CLIENT}
}

install_openshift() {
    echo -e "# Installing openshift..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    mkdir ${OPENSHIFT}
    mkdir /opt/${OPENSHIFT_SERVER}
    [[ -f "/tmp/${OPENSHIFT_SERVER}-linux-64bit.tar.gz" ]] || \
    wget https://github.com/openshift/origin/releases/download/${OPENSHIFT_VERSION}/${OPENSHIFT_SERVER}-linux-64bit.tar.gz -P /tmp
    tar -zxvf /tmp/${OPENSHIFT_SERVER}-linux-64bit.tar.gz -C /opt/${OPENSHIFT_SERVER} --strip-components 1 > /dev/null 2>&1
    cat >/usr/lib/systemd/system/openshift.service.cfg << 'EOF'
[Unit]
Description=OpenShift
Requires=docker.service network.service
After=network.service

[Service]
ExecStart=/opt/openshift-origin-server-v3.6.0-c4dd4cf/openshift start --cors-allowed-origins=.* --master-config=/var/lib/openshift/openshift.local.config/master/master-config.yaml --node-config=/var/lib/openshift/openshift.local.config/node-${FQDN}/node-config.yaml
WorkingDirectory=/var/lib/openshift/

[Install]
WantedBy=multi-user.target
EOF

envsubst < /usr/lib/systemd/system/openshift.service.cfg > /usr/lib/systemd/system/openshift.service
rm -f /usr/lib/systemd/system/openshift.service.cfg
}

config_openshift() {
    echo -e "# Configuring openshift..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    cd ${OPENSHIFT}
    /opt/${OPENSHIFT_SERVER}/openshift start --write-config=openshift.local.config 
    mv ${OPENSHIFT}/openshift.local.config/master/master-config.yaml ${OPENSHIFT}/openshift.local.config/master/master-config.yaml.orig
    envsubst < ${HOME}/workspace/autom8/cfg/master-config.yaml > ${OPENSHIFT}/openshift.local.config/master/master-config.yaml
    
    # Fix the varible substition
    sed -e 's/openshift\/origin-:/openshift\/origin-\$\{component\}\:\$\{version\}/g' /var/lib/openshift/openshift.local.config/master/master-config.yaml > tmp.file
    cat tmp.file > ${OPENSHIFT}/openshift.local.config/master/master-config.yaml
}

copy_certs() {
    echo -e "# Copy certs..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    cp ${HOME}/workspace/autom8/certs/* ${OPENSHIFT}/openshift.local.config/master/
}

create_linux_users() {
    echo -e "# Creating linux users..." >> ${LOG}
    useradd devel
    echo -e "devel\ndevel\n"| passwd devel
    usermod -aG wheel devel
    groupadd docker && gpasswd -a devel docker && systemctl restart docker
    newgrp docker
}

create_openshift_users() {
    echo -e "# Creating openshift users..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    mkdir /etc/openshift
    htpasswd -cb /etc/openshift/htpasswd admin admin
}

initialise_openshift() {
    echo -e "# Initialising openshift..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1

    systemctl daemon-reload
    systemctl enable openshift.service
    systemctl start openshift.service

    while true; do curl -k -s -f -o /dev/null --connect-timeout 1 https://localhost:8443/healthz/ready && break || sleep 1 ; done
    
    echo -e "# Creating user roles..." >> ${LOG}
    oc adm policy add-cluster-role-to-user cluster-admin admin
    oc adm policy add-cluster-role-to-group cluster-reader system:serviceaccounts
    
    [[ -f "/tmp/openshift-ansible.git" ]] || cd /tmp && git clone https://github.com/openshift/openshift-ansible.git
    cd /tmp/openshift-ansible/roles/openshift_examples/files/examples/latest/
    for image in image-streams/image-streams-centos7.json; do cat $image | oc create -n openshift -f -; done
    for image in db-templates/*.json; do cat $image | oc create -n openshift -f -; done
    for image in quickstart-templates/*.json; do cat $image | oc create -n openshift -f -; done
}

create_certs() {
    echo -e "# Creating certs..users..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    oadm ca create-server-cert \
    --signer-cert=/root/workspace/autom8/certs/example.com.crt \
    --signer-key=/root/workspace/autom8/certs/example.com.key \
    --signer-serial=/var/lib/openshift/openshift.local.config/master/ca.serial.txt \
    --hostnames=docker-registry.default.svc.cluster.local,kubernetes.default.svc,kubernetes.default.svc.cluster.local,localhost,openshift.default.svc.cluster.local,127.0.0.1,${INT_IPADDR},registry.${SUBDOMAIN} \
    --cert=/var/lib/openshift/openshift.local.config/master/registry.crt \
    --key=/var/lib/openshift/openshift.local.config/master/registry.key

    mkdir -p ~/.kube/
    ln -s /var/lib/openshift/openshift.local.config/master/admin.kubeconfig ~/.kube/config
    systemctl stop openshift.service
    systemctl start openshift.service
    
    while true; do curl -k -s -f -o /dev/null --connect-timeout 1 https://localhost:8443/healthz/ready && break || sleep 1 ; done
    echo -e "started openshift..."
}

create_registry() {
    echo -e "# Creating the registry..." >> {LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    oadm policy add-scc-to-user privileged -z registry 
    oadm registry --create --service-account=registry \
    --tls-certificate=/root/workspace/autom8/certs/example.com.pem
}

create_routes() {
    echo -e "# Creating routes..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    oadm policy add-scc-to-user hostnetwork -z router
    oadm router router --replicas=1 --service-account=router \
    --default-cert=/root/workspace/autom8/certs/example.com.pem
}

apply_policies() {
    echo -e "# Applying policies..." >> ${LOG}
    source /etc/profile.d/custom.sh > /dev/null 2>&1
    oadm policy add-cluster-role-to-user cluster-admin admin
}

expose_registry() {
    echo -e "# Expose registry..." >> ${LOG}
    oc create route passthrough    \
    --service=docker-registry    \
    --hostname=registry.${SUBDOMAIN}
    cp /root/workspace/autom8/certs/example.com.pem /etc/pki/ca-trust/source/anchors/
    update-ca-trust
    systemctl stop docker.service
    systemctl start docker.service
    systemctl stop openshift.service
    systemctl start openshift.service
}

read -d '' USAGE << 'EOF'
Usage: kojak [options] <user input>
-h, --help            show this help message and exit
-f, --fqdn            prompt user for fully qualified domain name
-c, --clean           remove configuration files
EOF


if [[ $# < 2 ]]; then echo "${USAGE}"; fi
while [[ $# > 1 ]]; do OPTS="$1"; shift

case $OPTS in
    -f|--fqdn)
    echo -e "########################################################################" > ${LOG}
    echo -e "Installing Openshift Origin..." >> ${LOG}
    echo -e "########################################################################\n" >> ${LOG}
    echo -e $(date) >> ${LOG}
    echo >> ${LOG}
    exec_check
    config_network
    disable_firewall
    update_system
    install_packages
    create_profile
    setup_env
    add_hostname
    pull_images
    install_dns
    install_openshift_client
    install_openshift
    config_openshift
    copy_certs
    create_linux_users
    create_openshift_users
    initialise_openshift
    create_certs
    create_registry
    create_routes
    apply_policies
    expose_registry
    shift
    ;;
    -c| --clean)
    echo "Cleanup configuration files"
    systemctl stop openshift
    COUNT=$(mount | grep tmpfs | wc -l)

    while [ $COUNT -gt 0 ]; do
      umount tmpfs > /dev/null 2>&1  
      COUNT=$[$COUNT-1]
    done

    rm -rf /opt/openshift*
    rm -rf /var/lib/openshift
    rm -rf ~/.m2
    rm -rf /root/*.log
    rm -rf /etc/openshift
    rm -rf /etc/profile.d/custom.sh
    rm -rf ~/.kube
    rm -rf ~/.pki

    systemctl restart docker
    shift
    ;;
    -h|--help)
    echo "Help options include"
    shift
    ;;
    *)
    echo "${USAGE}" # unknown option
    ;;
    \?)
    echo "${USAGE} option" # unknown option
    ;;
esac
done

